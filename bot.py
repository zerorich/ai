import os
import logging
from io import BytesIO
from PIL import Image
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import google.generativeai as genai

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
AI_API_KEY = os.getenv("AI_API_KEY")

genai.configure(api_key=AI_API_KEY)
_model = genai.GenerativeModel("gemini-1.5-flash")

logging.basicConfig(level=logging.INFO)

# --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò ---
def ask_ai(prompt: str, image: Image.Image = None) -> str:
    try:
        if image:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Gemini
            response = _model.generate_content([prompt, image])
        else:
            response = _model.generate_content(prompt)
        
        return response.text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="chat")],
        [InlineKeyboardButton("üìù –°–∂–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="summarize")],
        [InlineKeyboardButton("üë®‚Äçüíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞", callback_data="code")],
        [InlineKeyboardButton("üìà –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª", callback_data="trade")],
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
–ö–æ–º–∞–Ω–¥—ã:
/chat <–≤–æ–ø—Ä–æ—Å> ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
/summarize <—Ç–µ–∫—Å—Ç> ‚Äî —Å–∂–∞—Ç—å —Ç–µ–∫—Å—Ç
/code <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
/trade ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞, –∏ —è –¥–∞–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
""")

# --- –ò–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command = query.data

    if command == "chat":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏: /chat <—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å>")
    elif command == "summarize":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏: /summarize <—Ç–µ–∫—Å—Ç>")
    elif command == "code":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏: /code <–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞>")
    elif command == "trade":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, XAUUSD), –∏ —è –¥–∞–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ ---
async def handle_trade_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        photo = update.message.photo[-1]
        photo_file = await photo.get_file()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ BytesIO
        image_bytes = BytesIO()
        await photo_file.download_to_memory(image_bytes)
        image_bytes.seek(0)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
        image = Image.open(image_bytes)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')

        prompt = (
            "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, XAUUSD). "
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏: BUY –∏–ª–∏ SELL, —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞, "
            "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π Take Profit –∏ Stop Loss. –§–æ—Ä–º–∞—Ç:\n\n"
            "–°–∏–≥–Ω–∞–ª: BUY –∏–ª–∏ SELL\n"
            "–í—Ö–æ–¥: <—É—Ä–æ–≤–µ–Ω—å>\nTP: <—É—Ä–æ–≤–µ–Ω—å>\nSL: <—É—Ä–æ–≤–µ–Ω—å>\n\n"
            "–ö—Ä–∞—Ç–∫–æ –∏ —Ç–æ—á–Ω–æ, –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ —Ç—ã –ò–ò."
        )

        response = ask_ai(prompt, image)
        await update.message.reply_text(response)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# --- –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /chat.")
        return
    prompt = " ".join(context.args)
    reply = ask_ai(prompt)
    await update.message.reply_text(reply)

async def summarize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è.")
        return
    text = " ".join(context.args)
    prompt = f"–°–æ–∂–º–∏ –∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ:\n{text}"
    reply = ask_ai(prompt)
    await update.message.reply_text(reply)

async def code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–û–ø–∏—à–∏, –∫–∞–∫–æ–π –∫–æ–¥ –Ω—É–∂–µ–Ω.")
        return
    task = " ".join(context.args)
    prompt = f"–ù–∞–ø–∏—à–∏ –∫–æ–¥ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n{task}"
    reply = ask_ai(prompt)
    await update.message.reply_text(reply)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("chat", chat))
    app.add_handler(CommandHandler("summarize", summarize))
    app.add_handler(CommandHandler("code", code))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.PHOTO, handle_trade_photo))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()