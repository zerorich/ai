import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv()
AI_API_KEY = os.getenv("AI_API_KEY")  # API –∫–ª—é—á –±–µ—Ä—ë—Ç—Å—è –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")

import google.generativeai as ai
ai.configure(api_key=AI_API_KEY)
_chat_model = ai.GenerativeModel("gemini-1.5-flash")

logging.basicConfig(level=logging.INFO)

def ask_ai(prompt: str) -> str:
    try:
        chat = _chat_model.start_chat(history=[
            {
                "role": "user",
                "parts": [
                    "–¢—ã ‚Äî —É–º–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–µ —É–ø–æ–º–∏–Ω–∞–π —Å–≤–æ—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –∫–æ–º–ø–∞–Ω–∏—é Google –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."
                ]
            }
        ])
        response = chat.send_message(prompt)
        return response.text
    except Exception as e:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ."

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
–ö–æ–º–∞–Ω–¥—ã:
/chat <–≤–æ–ø—Ä–æ—Å> ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
/summarize <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç
/code <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
    """)

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /chat.")
        return
    prompt = " ".join(context.args)
    reply = ask_ai(prompt)
    await update.message.reply_text(reply)

async def summarize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è.")
        return
    text = " ".join(context.args)
    prompt = f"–ö—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ —Å–æ–∂–º–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n{text}"
    reply = ask_ai(prompt)
    await update.message.reply_text(reply)

async def code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–û–ø–∏—à–∏, –∫–∞–∫–æ–π –∫–æ–¥ –Ω—É–∂–µ–Ω.")
        return
    task = " ".join(context.args)
    prompt = f"–ù–∞–ø–∏—à–∏ –∫–æ–¥ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n{task}"
    reply = ask_ai(prompt)
    await update.message.reply_text(reply)

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("chat", chat))
    app.add_handler(CommandHandler("summarize", summarize))
    app.add_handler(CommandHandler("code", code))

    logging.info("ü§ñ –ü–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
