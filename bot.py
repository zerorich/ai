import os
import logging
from io import BytesIO
from PIL import Image
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import google.generativeai as genai

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
AI_API_KEY = os.getenv("AI_API_KEY")

genai.configure(api_key=AI_API_KEY)
_model = genai.GenerativeModel("gemini-1.5-flash")

logging.basicConfig(level=logging.INFO)

# --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò ---
def clean_markdown(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    import re
    # –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **text**
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
    # –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–∏–≤ *text*
    text = re.sub(r'\*(.*?)\*', r'\1', text)
    # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ _text_
    text = re.sub(r'_(.*?)_', r'\1', text)
    # –£–±–∏—Ä–∞–µ–º –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ~~text~~
    text = re.sub(r'~~(.*?)~~', r'\1', text)
    return text

def ask_ai(prompt: str, image: Image.Image = None) -> str:
    try:
        if image:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Gemini
            response = _model.generate_content([prompt, image])
        else:
            response = _model.generate_content(prompt)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏
        clean_response = clean_markdown(response.text)
        return clean_response
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="chat")],
        [InlineKeyboardButton("üìù –°–∂–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="summarize")],
        [InlineKeyboardButton("üë®‚Äçüíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞", callback_data="code")],
        [InlineKeyboardButton("üìà –ë—ã—Å—Ç—Ä—ã–π —Å–∏–≥–Ω–∞–ª", callback_data="trade")],
        [InlineKeyboardButton("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="detailed")],
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
–ö–æ–º–∞–Ω–¥—ã:
/chat <–≤–æ–ø—Ä–æ—Å> ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
/summarize <—Ç–µ–∫—Å—Ç> ‚Äî —Å–∂–∞—Ç—å —Ç–µ–∫—Å—Ç
/code <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
/trade ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
/analysis ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
""")

# --- –ò–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command = query.data

    if command == "chat":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏: /chat <—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å>")
    elif command == "summarize":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏: /summarize <—Ç–µ–∫—Å—Ç>")
    elif command == "code":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏: /code <–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞>")
    elif command == "trade":
        context.user_data['analysis_type'] = 'quick'
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.")
    elif command == "detailed":
        context.user_data['analysis_type'] = 'detailed'
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")

# --- –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
async def handle_trade_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        photo = update.message.photo[-1]
        photo_file = await photo.get_file()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ BytesIO
        image_bytes = BytesIO()
        await photo_file.download_to_memory(image_bytes)
        image_bytes.seek(0)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
        image = Image.open(image_bytes)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
        analysis_type = context.user_data.get('analysis_type', 'quick')
        
        if analysis_type == 'detailed':
            prompt = (
                "–°–¥–µ–ª–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —ç—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞:\n\n"
                "üìà –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:\n"
                "‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: [—á–∏—Ç–∞–π —Ç–æ—á–Ω–æ —Å –≥—Ä–∞—Ñ–∏–∫–∞]\n"
                "‚Ä¢ –¢—Ä–µ–Ω–¥: [–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π]\n"
                "‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω —Å–≤–µ—á–µ–π: [—á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏]\n"
                "‚Ä¢ –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã]\n"
                "‚Ä¢ –£—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã]\n"
                "‚Ä¢ –û–±—ä–µ–º—ã: [–µ—Å–ª–∏ –≤–∏–¥–Ω—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ]\n\n"
                "üéØ –¢–û–†–ì–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:\n"
                "1. –ü–û–ö–£–ü–ö–ê:\n"
                "   - –í—Ö–æ–¥ –æ—Ç —É—Ä–æ–≤–Ω—è: [—Ü–µ–Ω–∞]\n"
                "   - TP1: [—Ü–µ–Ω–∞] | TP2: [—Ü–µ–Ω–∞]\n"
                "   - SL: [—Ü–µ–Ω–∞]\n"
                "   - –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: [—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ]\n\n"
                "2. –ü–†–û–î–ê–ñ–ê:\n"
                "   - –í—Ö–æ–¥ –æ—Ç —É—Ä–æ–≤–Ω—è: [—Ü–µ–Ω–∞]\n"
                "   - TP1: [—Ü–µ–Ω–∞] | TP2: [—Ü–µ–Ω–∞]\n"
                "   - SL: [—Ü–µ–Ω–∞]\n"
                "   - –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: [—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ]\n\n"
                "‚ö° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:\n"
                "[–õ—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞]\n\n"
                "–í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏–ª–∏ markdown —Ä–∞–∑–º–µ—Ç–∫—É –≤ –æ—Ç–≤–µ—Ç–µ! "
                "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏. "
                "–ß–∏—Ç–∞–π —Ü–µ–Ω—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ, –Ω–µ —É–≥–∞–¥—ã–≤–∞–π!"
            )
        else:
            prompt = (
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ:\n\n"
                "1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ —Ç—Ä–µ–Ω–¥\n"
                "2. –ù–∞–π–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è\n"
                "3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π –∏ –æ–±—ä–µ–º\n"
                "4. –£—á—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –ª–∏–Ω–∏–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã\n"
                "5. –û—Ü–µ–Ω–∏ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ\n\n"
                "–ù–ê –û–°–ù–û–í–ï –¢–û–ß–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –¥–∞–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:\n\n"
                "üìä –ê–ù–ê–õ–ò–ó:\n"
                "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: [—Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞]\n"
                "–¢—Ä–µ–Ω–¥: [–≤–æ—Å—Ö–æ–¥—è—â–∏–π/–Ω–∏—Å—Ö–æ–¥—è—â–∏–π/–±–æ–∫–æ–≤–æ–π]\n"
                "–ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏: [—É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏]\n\n"
                "üéØ –¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ:\n"
                "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: BUY/SELL\n"
                "–í—Ö–æ–¥: [—Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞]\n"
                "Take Profit: [–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π TP]\n"
                "Stop Loss: [–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π SL]\n"
                "Risk/Reward: [—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ]\n\n"
                "üí° –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n"
                "[–û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–π —Å–∏–≥–Ω–∞–ª]\n\n"
                "–í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤–µ–∑–¥–æ—á–∫–∏, markdown –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã! "
                "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º —Å —ç–º–æ–¥–∑–∏. "
                "–ß–∏—Ç–∞–π —Ü–µ–Ω—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ!"
            )

        response = ask_ai(prompt, image)
        await update.message.reply_text(response)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
        context.user_data.pop('analysis_type', None)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# --- –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /chat.")
        return
    prompt = " ".join(context.args)
    reply = ask_ai(prompt)
    await update.message.reply_text(reply)

async def summarize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è.")
        return
    text = " ".join(context.args)
    prompt = f"–°–æ–∂–º–∏ –∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ:\n{text}"
    reply = ask_ai(prompt)
    await update.message.reply_text(reply)

async def code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–û–ø–∏—à–∏, –∫–∞–∫–æ–π –∫–æ–¥ –Ω—É–∂–µ–Ω.")
        return
    task = " ".join(context.args)
    prompt = f"–ù–∞–ø–∏—à–∏ –∫–æ–¥ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n{task}"
    reply = ask_ai(prompt)
    await update.message.reply_text(reply)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("chat", chat))
    app.add_handler(CommandHandler("summarize", summarize))
    app.add_handler(CommandHandler("code", code))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.PHOTO, handle_trade_photo))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()